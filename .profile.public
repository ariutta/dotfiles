#!/bin/bash
# ██████╗ ██╗   ██╗██████╗ ██╗     ██╗ ██████╗     ██████╗ ███╗   ██╗██╗  ██╗   ██╗██╗
# ██╔══██╗██║   ██║██╔══██╗██║     ██║██╔════╝    ██╔═══██╗████╗  ██║██║  ╚██╗ ██╔╝██║
# ██████╔╝██║   ██║██████╔╝██║     ██║██║         ██║   ██║██╔██╗ ██║██║   ╚████╔╝ ██║
# ██╔═══╝ ██║   ██║██╔══██╗██║     ██║██║         ██║   ██║██║╚██╗██║██║    ╚██╔╝  ╚═╝
# ██║     ╚██████╔╝██████╔╝███████╗██║╚██████╗    ╚██████╔╝██║ ╚████║███████╗██║   ██╗
# ╚═╝      ╚═════╝ ╚═════╝ ╚══════╝╚═╝ ╚═════╝     ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚═╝   ╚═╝
#                                                                                     
# Warning: this file will be made public online. Only include publicly shareable data.
# see ~/README.md for details on purposes of .profile .profile.public .bashrc .bashrc.public .bash_profile

ensure_on_path () {
	IFS=':' read -r -a MAPFILE <<< "$PATH"
	# NOTE: not using mapfile bc macOS has on bash 3, which lacks mapfile.
	#mapfile -d ':' -t < <(echo "$PATH")
	if [ -d "$1" ] && [[ ! "${MAPFILE[*]}" =~ ${1} ]]; then
		export PATH="$1:$PATH"
	fi
}

# Lynx Settings
export LYNX_LSS=$HOME/dotfiles/lynx.lss

# RStudio
# Setting this will make RStudio use R from specified path,
# but only when opening from Terminal, like this:
#   /Applications/RStudio.app/Contents/MacOS/RStudio
export RSTUDIO_WHICH_R=$HOME/.nix-profile/bin/R
# To make clicking the RStudio icon work, do this:
#   mkdir -p /usr/local/bin
#   cd /usr/local/bin/
#   ln -s $HOME/.nix-profile/bin/R R
# For more info, see
# https://support.rstudio.com/hc/en-us/articles/200486138-Using-Different-Versions-of-R

# Don't check mail when opening terminal.
unset MAILCHECK

# Change this to your console based IRC client of choice.
export IRC_CLIENT='irssi'

# Set this to the command you use for todo.txt-cli
export TODO="t"

# Set this to false to turn off version control status checking within the prompt for all themes
export SCM_CHECK=true

# Set Xterm/screen/Tmux title with only a short hostname.
# Uncomment this (or set SHORT_HOSTNAME to something else),
# Will otherwise fall back on $HOSTNAME.
#export SHORT_HOSTNAME=$(hostname -s)

# Set Xterm/screen/Tmux title with only a short username.
# Uncomment this (or set SHORT_USER to something else),
# Will otherwise fall back on $USER.
#export SHORT_USER=${USER:0:8}

# Set Xterm/screen/Tmux title with shortened command and directory.
# Uncomment this to set.
#export SHORT_TERM_LINE=true

# Set vcprompt executable path for scm advance info in prompt (demula theme)
# https://github.com/djl/vcprompt
#export VCPROMPT_EXECUTABLE=~/.vcprompt/bin/vcprompt

# Make gpg work properly
GPG_TTY=$(tty)
export GPG_TTY

# Fixing bug with macOS ssh-agent forgetting keys.
#    From GH help docs:
#       On macOS, ssh-agent will "forget" your key, once it gets restarted during reboots.
#       But you can import your SSH keys into Keychain using this command:
#       /usr/bin/ssh-add -K
#    This only runs for macOS:
if [ "$(uname)" = "Darwin" ]; then
	# The extra code is to avoid the "Identity added: ..." msg every time.
	ssh_add_msg=$(/usr/bin/ssh-add -K 2>&1);
	if [[ $ssh_add_msg != "Identity added: /Users/$USER/.ssh/id_rsa (/Users/$USER/.ssh/id_rsa)" ]]; then
		echo "$ssh_add_msg" > /dev/stderr;
	fi
elif [ "$(uname -n)" = "nixos" ]; then
	echo '' > /dev/null;
	# Do nothing here for NixOS.
	# We configure SSH in /etc/nixos/configuration with:
	#programs.ssh.startAgent = true;
	#
	# and KeepassXC:
	# see https://keepassxc.org/docs/#faq-ssh-agent-how
elif [ "$(uname)" = "Linux" ]; then
	###################
	# Non-macOS, non-NixOS Linux systems
	###################

	# Start ssh agent
	eval "$(ssh-agent -s)"

	# TODO: do we want to use KeepassXC? SSH_ASKPASS?

	# Load SSH identities.
	# See https://stackoverflow.com/a/48509425
	ssh-add -l &>/dev/null
	if [ "$?" == 1 ]; then
		# The agent has no identities.
		# Time to add one.
		ssh-add -t 4h
	fi
fi

# Configure fonts. TODO: is this still needed?
if [ ! "$(uname)" = "Darwin" ]; then
	###################
	# Non-macOS systems
	###################

	export FONTCONFIG_PATH=/etc/fonts
fi

####################
# Nix settings
####################

if [ -e "/nix/var/nix/daemon-socket" ]; then
	export NIX_REMOTE=daemon
fi

# source nix.sh if present.
if [ -e "/usr/local/etc/profile.d/nix.sh" ]; then
  # shellcheck disable=SC1091 # ignore ShellCheck warning if it doesn't exist.
  . "/usr/local/etc/profile.d/nix.sh";
elif [ -e "$HOME/.nix-profile/etc/profile.d/nix.sh" ]; then
  # TODO: sourcing ~/.nix-profile/etc/profile.d/nix.sh used to be after the
  #       "export NIX_PATH..." code further below. Is it OK to move it up here?
  # TODO: What is the relationship between these two files:
  #           /usr/local/etc/profile.d/nix.sh
  #           ~/.nix-profile/etc/profile.d/nix.sh
  #       Do they refer to equivalent files? 
  #       Maybe /usr/local/... is for all users, and the other is per user?
  #       Maybe /usr/local/... is for macOS, and the other is for non-NixOS Linux?

  # shellcheck disable=SC1091 # ignore ShellCheck warning if it doesn't exist.
  # shellcheck source=../.nix-profile/etc/profile.d/nix.sh
  . "$HOME/.nix-profile/etc/profile.d/nix.sh";
fi

# If .nix-channels file exists but NIX_PATH is not set, then export NIX_PATH.
if [ -e "$HOME/.nix-channels" ] && [ -z "$NIX_PATH" ]; then
	NIX_PATH=$(sed -e "s~\(.*\)\ \(.*\)~\2=$HOME/.nix-defexpr/channels/\2~g" "$HOME/.nix-channels" | paste -sd ":" -);
	export NIX_PATH;
fi

# TODO: this is slow. Should it really be in .profile, or does it belong in .bashrc?
if [ -e "$HOME/.nix-profile/Applications" ] && [ ! -e "$HOME/Applications/Nix Apps" ]; then
  # NOTE: the flag indicating "don't dereference symlinks" varies:
  #       * GNU ln: -n
  #       * macOS ln: -h
  if [ "$(uname)" = "Darwin" ]; then
    ln -sfh "$HOME/.nix-profile/Applications" "$HOME/Applications/Nix Apps";
  else
    ln -sfn "$HOME/.nix-profile/Applications" "$HOME/Applications/Nix Apps";
  fi
fi

# All users should be able to use the Nix packages that were installed as root.
ensure_on_path "/nix/var/nix/profiles/default/bin"

####################
# Bash-it
# NOTE: it would make quite a bit of sense for this to be
# located in .bashrc.public, but it needs to happen before
# nix is sourced, because otherwise, the PS1 env var that
# makes the prompt for nix-shell green will not display.
# UPDATED: it's still in here, but strangely, the nix-shell prompt seems fine.
# However, I have the opposite problem. The following seems as if it needs to
# happen AFTER Nix is initialized above. Putting this into .bashrc.public
# doesn't seem to work, maybe because it gets run too soon?
####################

# BASH_IT is the path to the bash it configuration.
# NOTE: "$BASH_IT/bash_it.sh" expects to find an exported env var named "BASH_IT".
export BASH_IT="$HOME/.nix-profile/share/bash_it"
if [ -n "$BASH_VERSION" ] && [ -d "$BASH_IT" ] && complete --help 2>/dev/null | grep -q complete; then
	# Assume Bash

	ensure_on_path "$BASH_IT"

  POWERLINE_PATH_BINDING_PATH="$(echo "$(nix-env -q --out-path --no-name python3.*-powerline.* | head -n 1)"/lib/python3.*/site-packages/powerline/bindings/bash/powerline.sh)"
	if [ -f "$POWERLINE_PATH_BINDING_PATH" ]; then
		# http://powerline.readthedocs.io/en/master/usage/shell-prompts.html#bash-prompt
		powerline-daemon -q
		export POWERLINE_BASH_CONTINUATION=1
		export POWERLINE_BASH_SELECT=1
    # TODO: will have to bump this up from 3.6 at some point
    # shellcheck source=../.nix-profile/lib/python3.6/site-packages/powerline/bindings/bash/powerline.sh
		. "$POWERLINE_PATH_BINDING_PATH"

		# Lock and Load a custom theme file
		# location $HOME/.bash_it/themes/
		export BASH_IT_THEME="powerline"
	fi

	# Load Bash It
  # shellcheck source=../.nix-profile/share/bash_it/bash_it.sh
	if [ -e "$BASH_IT/bash_it.sh" ]; then . "$BASH_IT/bash_it.sh"; fi
fi

# enable direnv, if installed
if direnv --version > /dev/null 2>&1; then
	eval "$(direnv hook bash)"
fi
