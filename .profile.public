#!/bin/bash
# shellcheck disable=SC1090
# ██████╗ ██╗   ██╗██████╗ ██╗     ██╗ ██████╗     ██████╗ ███╗   ██╗██╗  ██╗   ██╗██╗
# ██╔══██╗██║   ██║██╔══██╗██║     ██║██╔════╝    ██╔═══██╗████╗  ██║██║  ╚██╗ ██╔╝██║
# ██████╔╝██║   ██║██████╔╝██║     ██║██║         ██║   ██║██╔██╗ ██║██║   ╚████╔╝ ██║
# ██╔═══╝ ██║   ██║██╔══██╗██║     ██║██║         ██║   ██║██║╚██╗██║██║    ╚██╔╝  ╚═╝
# ██║     ╚██████╔╝██████╔╝███████╗██║╚██████╗    ╚██████╔╝██║ ╚████║███████╗██║   ██╗
# ╚═╝      ╚═════╝ ╚═════╝ ╚══════╝╚═╝ ╚═════╝     ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚═╝   ╚═╝
#                                                                                     
# Warning: this file will be made public online. Only include publicly shareable data.
# see ~/README.md for details on purposes of .profile .profile.public .bashrc .bashrc.public .bash_profile

ensure_on_path () {
	mapfile -d ':' -t < <(echo "$PATH")
	if [ -d "$1" ] && [[ ! "${MAPFILE[*]}" =~ ${1} ]]; then
		export PATH="$1:$PATH"
	fi
}

# Lynx Settings
export LYNX_LSS=$HOME/dotfiles/lynx.lss

## Python
#export WORKON_HOME=$HOME/.virtualenvs
#export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'
#export PIP_VIRTUALENV_BASE=$WORKON_HOME
#export PIP_RESPECT_VIRTUALENV=true
##export PATH="/System/Library/Frameworks/Python.framework/Versions/2.7/Python:$PATH"
##export VIRTUALENVWRAPPER_PYTHON=/usr/local/Cellar/python/2.7.14/bin/python2.7
export PYTHONPATH=$HOME/.nix-profile/bin/python

## Make NPM CLI programs available from command line
#NPM_SCRIPTS_PATH="/usr/local/share/npm/bin"
#if [ "$PATH" != *"$NPM_SCRIPTS_PATH"* ]; then
#	export PATH="$NPM_SCRIPTS_PATH:$PATH"
#fi

## For first time, need to add a Java environment, e.g.:
##   jenv add /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/
## or
##   jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/
#
## SPARK
#export SPARK_HOME="$HOME"
#export PATH="$HOME/spark-1.5.2-bin-hadoop2.6/bin:$PATH"
#
## PostgreSQL
#export PATH="/Applications/Postgres.app/Contents/Versions/latest/bin:$PATH"

# RStudio
# Setting this will make RStudio use R from specified path,
# but only when opening from Terminal, like this:
#   /Applications/RStudio.app/Contents/MacOS/RStudio
export RSTUDIO_WHICH_R=$HOME/.nix-profile/bin/R
# To make clicking the RStudio icon work, do this:
#   mkdir -p /usr/local/bin
#   cd /usr/local/bin/
#   ln -s $HOME/.nix-profile/bin/R R
# For more info, see
# https://support.rstudio.com/hc/en-us/articles/200486138-Using-Different-Versions-of-R

# Make my dev helper scripts available from command line
ensure_on_path "$HOME/dotfiles/dev_helper_scripts"

# Don't check mail when opening terminal.
unset MAILCHECK

# Change this to your console based IRC client of choice.
export IRC_CLIENT='irssi'

# Set this to the command you use for todo.txt-cli
export TODO="t"

# Set this to false to turn off version control status checking within the prompt for all themes
export SCM_CHECK=true

# Set Xterm/screen/Tmux title with only a short hostname.
# Uncomment this (or set SHORT_HOSTNAME to something else),
# Will otherwise fall back on $HOSTNAME.
#export SHORT_HOSTNAME=$(hostname -s)

# Set Xterm/screen/Tmux title with only a short username.
# Uncomment this (or set SHORT_USER to something else),
# Will otherwise fall back on $USER.
#export SHORT_USER=${USER:0:8}

# Set Xterm/screen/Tmux title with shortened command and directory.
# Uncomment this to set.
#export SHORT_TERM_LINE=true

# Set vcprompt executable path for scm advance info in prompt (demula theme)
# https://github.com/djl/vcprompt
#export VCPROMPT_EXECUTABLE=~/.vcprompt/bin/vcprompt

# Fixing bug with macOS ssh-agent forgetting keys.
#    From GH help docs:
#       On macOS, ssh-agent will "forget" your key, once it gets restarted during reboots.
#       But you can import your SSH keys into Keychain using this command:
#       /usr/bin/ssh-add -K
#    This only runs for macOS:
if [ "$(uname)" = "Darwin" ]; then
	/usr/bin/ssh-add -K

	## TODO the code below doesn't seem to be needed anymore -- cls works w/out it on macOS now
	##      (at least in Terminal.app). I remember it not working before. Why?
	##      * Is this defined somewhere else? 
	##      * Does bash_it define this?
	##      * Did Apple add it to Terminal.app?
	##      * Was I using iTerm2 before, not Terminal.app?
	##      * Something else?
	##
	## cls: clear terminal buffer.
	## Uses Apple Script, so only works on macOS.
	## Command-K does the same thing
	#if [ -n "$(command -v osascript)" ]; then
	#        function cls {
	#                osascript -e 'tell application "System Events" to keystroke "k" using command down'
	#        }
	#fi
else
	export FONTCONFIG_PATH=/etc/fonts
fi

####################
# Nix settings
####################

if [ -e "/nix/var/nix/daemon-socket" ]; then
	export NIX_REMOTE=daemon
fi

if [ -e "/usr/local/etc/profile.d/nix.sh" ]; then . "/usr/local/etc/profile.d/nix.sh"; fi

# if .nix-channels file exists but NIX_PATH not set, set it
if [ -e "$HOME/.nix-channels" ] && [ -z "$NIX_PATH" ]; then export NIX_PATH=`cat $HOME/.nix-channels | sed -e "s~\(.*\)\ \(.*\)~\2=$HOME/.nix-defexpr/channels/\2~g" | paste -sd ":" -`; fi

if [ -e "$HOME/.nix-profile/etc/profile.d/nix.sh" ]; then . "$HOME/.nix-profile/etc/profile.d/nix.sh"; fi
# TODO: this is slow., Should it really be in .profile, or does it belong in .bashrc?
# NOTE: GNU ln uses "-n" to indicate "don't dereference symlinks."
# 	macOS ln uses "-h".
if [ -e "$HOME/.nix-profile/Applications" ]; then ln -sfn "$HOME/.nix-profile/Applications" "$HOME/Applications/Nix Apps"; fi

# Make the Nix packages that were installed as root available to all users
ensure_on_path "/nix/var/nix/profiles/default/bin"

####################
# Bash-it
# NOTE: it would make quite a bit of sense for this to be
# located in .bashrc.public, but it needs to happen before
# nix is sourced, because otherwise, the PS1 env var that
# makes the prompt for nix-shell green will not display.
# UPDATED: it's still in here, but strangely, the nix-shell prompt seems fine.
# However, I have the opposite problem. The following seems as if it needs to
# happen AFTER Nix is initialized above. Putting this into .bashrc.public
# doesn't seem to work, maybe because it gets run too soon?
####################

# Path to the bash it configuration
export BASH_IT="$HOME/.nix-profile/share/bash_it"
if [ -n "$BASH_VERSION" ] && [ -d "$BASH_IT" ]; then
	# Assume Bash

	ensure_on_path "$BASH_IT"

	POWERLINE_PATH="$(nix-env -q --out-path --no-name python3.*-powerline.* | head -n 1)/lib/python3.*/site-packages/powerline/bindings/bash/powerline.sh"
	if [ -f $POWERLINE_PATH ]; then
		# http://powerline.readthedocs.io/en/master/usage/shell-prompts.html#bash-prompt
		powerline-daemon -q
		export POWERLINE_BASH_CONTINUATION=1
		export POWERLINE_BASH_SELECT=1
		. $POWERLINE_PATH

		# Lock and Load a custom theme file
		# location $HOME/.bash_it/themes/
		export BASH_IT_THEME="powerline"
	fi

	# Load Bash It
	if [ -e "$BASH_IT/bash_it.sh" ]; then . "$BASH_IT/bash_it.sh"; fi
fi
